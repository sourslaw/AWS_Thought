{"ast":null,"code":"var _jsxFileName = \"/Users/scottlawan/Documents/Boot_Camp_2021/Cont_Ed_AWS/AWS_Thought/client/src/components/ThoughtForm/index.js\";\nimport React, { useState, useRef } from \"react\"; // import React, { useRef } from 'react'; // use this hook to retrieve the image file uploaded by the user\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    thought: \"\"\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n  const fileInput = useRef(null); // handle the image upload by the user\n\n  const handleImageUpload = event => {\n    event.preventDefault();\n    const data = new FormData(); // declaring interface object, data from FormData\n\n    data.append('image', fileInput.current.files[0]); // send image file to endpoint with the postImage function\n\n    const postImage = async () => {\n      try {\n        const res = await fetch('/api/image-upload', {\n          mode: 'cors',\n          method: 'POST',\n          body: data\n        });\n        if (!res.ok) throw new Error(res.statusText); // once respose from image upload endpoint is received, we convert response into JSON object . . .\n\n        const postResponse = await res.json();\n        setFormState({ ...formState,\n          image: postResponse.Location\n        }); // public url of the image\n\n        return postResponse.Location;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    postImage();\n  }; // update state based on form input changes\n\n\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setFormState({ ...formState,\n        [event.target.name]: event.target.value\n      });\n      setCharacterCount(event.target.value.length);\n    }\n  }; // submit form\n\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const postData = async () => {\n      const res = await fetch('/api/users', {\n        // use fetch function to send form data to the endpoint in the body of the request\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formState)\n      });\n      const data = await res.json();\n      console.log(data);\n    };\n\n    postData(); // clear form value\n\n    setFormState({\n      username: \"\",\n      thought: \"\"\n    });\n    setCharacterCount(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: `m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Character Count: \", characterCount, \"/280\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"flex-row justify-center justify-space-between-md align-stretch\",\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"Name\",\n    name: \"username\",\n    value: formState.username,\n    className: \"form-input col-12 \",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"Here's a new thought...\",\n    name: \"thought\",\n    value: formState.thought,\n    className: \"form-input col-12 \",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-input col-12  p-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Add an image to your thought:\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    ref: fileInput,\n    className: \"form-input p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: handleImageUpload,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Upload\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn col-12 \",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nexport default ThoughtForm;","map":{"version":3,"sources":["/Users/scottlawan/Documents/Boot_Camp_2021/Cont_Ed_AWS/AWS_Thought/client/src/components/ThoughtForm/index.js"],"names":["React","useState","useRef","ThoughtForm","formState","setFormState","username","thought","characterCount","setCharacterCount","fileInput","handleImageUpload","event","preventDefault","data","FormData","append","current","files","postImage","res","fetch","mode","method","body","ok","Error","statusText","postResponse","json","image","Location","error","console","log","handleChange","target","value","length","name","handleFormSubmit","postData","headers","Accept","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n// import React, { useRef } from 'react'; // use this hook to retrieve the image file uploaded by the user\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    username: \"\",\n    thought: \"\",\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const fileInput = useRef(null);\n  // handle the image upload by the user\n  const handleImageUpload = event => {\n    event.preventDefault();\n    const data = new FormData(); // declaring interface object, data from FormData\n    data.append('image', fileInput.current.files[0]);\n    // send image file to endpoint with the postImage function\n    const postImage = async () => {\n      try {\n        const res = await fetch('/api/image-upload', {\n          mode: 'cors',\n          method: 'POST',\n          body: data\n        })\n        if (!res.ok) throw new Error(res.statusText); // once respose from image upload endpoint is received, we convert response into JSON object . . .\n        const postResponse = await res.json();\n        setFormState({...formState, image: postResponse.Location}) // public url of the image\n        \n        return postResponse.Location;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    postImage();\n  };\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setFormState({ ...formState, [event.target.name]: event.target.value });\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // submit form\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    const postData = async () => {\n      const res = await fetch('/api/users', { // use fetch function to send form data to the endpoint in the body of the request\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formState)\n      })\n      const data = await res.json();\n      console.log(data);\n    }\n\n    postData();\n\n    // clear form value\n    setFormState({ username: \"\", thought: \"\" });\n    setCharacterCount(0);\n  };\n\n  return (\n    <div>\n      <p className={`m-0 ${characterCount === 280 ? \"text-error\" : \"\"}`}>\n        Character Count: {characterCount}/280\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <input\n          placeholder=\"Name\"\n          name=\"username\"\n          value={formState.username}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></input>\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          name=\"thought\"\n          value={formState.thought}\n          className=\"form-input col-12 \"\n          onChange={handleChange}\n        ></textarea>\n        <label className=\"form-input col-12  p-1\">\n          Add an image to your thought: \n          <input\n            type=\"file\"\n            ref={fileInput}\n            className=\"form-input p-2\"\n          />\n          <button \n            className=\"btn\" \n            onClick={handleImageUpload} \n            type=\"submit\"\n          >\n            Upload\n          </button>\n        </label>\n        <button className=\"btn col-12 \" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n"]},"metadata":{},"sourceType":"module"}